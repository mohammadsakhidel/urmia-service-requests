#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ShahrdariSms")]
	public partial class MyDatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertOrganizationKeyword(OrganizationKeyword instance);
    partial void UpdateOrganizationKeyword(OrganizationKeyword instance);
    partial void DeleteOrganizationKeyword(OrganizationKeyword instance);
    partial void InsertOperator(Operator instance);
    partial void UpdateOperator(Operator instance);
    partial void DeleteOperator(Operator instance);
    partial void InsertSupervisor(Supervisor instance);
    partial void UpdateSupervisor(Supervisor instance);
    partial void DeleteSupervisor(Supervisor instance);
    partial void InsertPollOption(PollOption instance);
    partial void UpdatePollOption(PollOption instance);
    partial void DeletePollOption(PollOption instance);
    partial void InsertPoll(Poll instance);
    partial void UpdatePoll(Poll instance);
    partial void DeletePoll(Poll instance);
    partial void InsertCompetitionOption(CompetitionOption instance);
    partial void UpdateCompetitionOption(CompetitionOption instance);
    partial void DeleteCompetitionOption(CompetitionOption instance);
    partial void InsertCompetition(Competition instance);
    partial void UpdateCompetition(Competition instance);
    partial void DeleteCompetition(Competition instance);
    partial void InsertRecievingError(RecievingError instance);
    partial void UpdateRecievingError(RecievingError instance);
    partial void DeleteRecievingError(RecievingError instance);
    partial void InsertRecievedMessage(RecievedMessage instance);
    partial void UpdateRecievedMessage(RecievedMessage instance);
    partial void DeleteRecievedMessage(RecievedMessage instance);
    partial void InsertPollAnswer(PollAnswer instance);
    partial void UpdatePollAnswer(PollAnswer instance);
    partial void DeletePollAnswer(PollAnswer instance);
    partial void InsertCompetitionAnswer(CompetitionAnswer instance);
    partial void UpdateCompetitionAnswer(CompetitionAnswer instance);
    partial void DeleteCompetitionAnswer(CompetitionAnswer instance);
    partial void InsertSuggestionRouting(SuggestionRouting instance);
    partial void UpdateSuggestionRouting(SuggestionRouting instance);
    partial void DeleteSuggestionRouting(SuggestionRouting instance);
    partial void InsertSuggestion(Suggestion instance);
    partial void UpdateSuggestion(Suggestion instance);
    partial void DeleteSuggestion(Suggestion instance);
    partial void InsertPattern(Pattern instance);
    partial void UpdatePattern(Pattern instance);
    partial void DeletePattern(Pattern instance);
    partial void InsertSentMessageReciever(SentMessageReciever instance);
    partial void UpdateSentMessageReciever(SentMessageReciever instance);
    partial void DeleteSentMessageReciever(SentMessageReciever instance);
    partial void InsertSentMessage(SentMessage instance);
    partial void UpdateSentMessage(SentMessage instance);
    partial void DeleteSentMessage(SentMessage instance);
    partial void InsertInteractiveSentMessage(InteractiveSentMessage instance);
    partial void UpdateInteractiveSentMessage(InteractiveSentMessage instance);
    partial void DeleteInteractiveSentMessage(InteractiveSentMessage instance);
    partial void InsertCitizen(Citizen instance);
    partial void UpdateCitizen(Citizen instance);
    partial void DeleteCitizen(Citizen instance);
    partial void InsertField(Field instance);
    partial void UpdateField(Field instance);
    partial void DeleteField(Field instance);
    partial void InsertContactBook(ContactBook instance);
    partial void UpdateContactBook(ContactBook instance);
    partial void DeleteContactBook(ContactBook instance);
    partial void InsertContact(Contact instance);
    partial void UpdateContact(Contact instance);
    partial void DeleteContact(Contact instance);
    partial void InsertFieldValue(FieldValue instance);
    partial void UpdateFieldValue(FieldValue instance);
    partial void DeleteFieldValue(FieldValue instance);
    partial void InsertMonagheseh(Monagheseh instance);
    partial void UpdateMonagheseh(Monagheseh instance);
    partial void DeleteMonagheseh(Monagheseh instance);
    partial void InsertMozaiedeh(Mozaiedeh instance);
    partial void UpdateMozaiedeh(Mozaiedeh instance);
    partial void DeleteMozaiedeh(Mozaiedeh instance);
    partial void InsertResponseSetting(ResponseSetting instance);
    partial void UpdateResponseSetting(ResponseSetting instance);
    partial void DeleteResponseSetting(ResponseSetting instance);
    partial void InsertOperatorAccessRule(OperatorAccessRule instance);
    partial void UpdateOperatorAccessRule(OperatorAccessRule instance);
    partial void DeleteOperatorAccessRule(OperatorAccessRule instance);
    partial void InsertOrganization(Organization instance);
    partial void UpdateOrganization(Organization instance);
    partial void DeleteOrganization(Organization instance);
    partial void InsertInformSetting(InformSetting instance);
    partial void UpdateInformSetting(InformSetting instance);
    partial void DeleteInformSetting(InformSetting instance);
    #endregion
		
		public MyDatabaseDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ASPNETDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MyDatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyDatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyDatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyDatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<OrganizationKeyword> OrganizationKeywords
		{
			get
			{
				return this.GetTable<OrganizationKeyword>();
			}
		}
		
		public System.Data.Linq.Table<Operator> Operators
		{
			get
			{
				return this.GetTable<Operator>();
			}
		}
		
		public System.Data.Linq.Table<Supervisor> Supervisors
		{
			get
			{
				return this.GetTable<Supervisor>();
			}
		}
		
		public System.Data.Linq.Table<PollOption> PollOptions
		{
			get
			{
				return this.GetTable<PollOption>();
			}
		}
		
		public System.Data.Linq.Table<Poll> Polls
		{
			get
			{
				return this.GetTable<Poll>();
			}
		}
		
		public System.Data.Linq.Table<CompetitionOption> CompetitionOptions
		{
			get
			{
				return this.GetTable<CompetitionOption>();
			}
		}
		
		public System.Data.Linq.Table<Competition> Competitions
		{
			get
			{
				return this.GetTable<Competition>();
			}
		}
		
		public System.Data.Linq.Table<RecievingError> RecievingErrors
		{
			get
			{
				return this.GetTable<RecievingError>();
			}
		}
		
		public System.Data.Linq.Table<RecievedMessage> RecievedMessages
		{
			get
			{
				return this.GetTable<RecievedMessage>();
			}
		}
		
		public System.Data.Linq.Table<PollAnswer> PollAnswers
		{
			get
			{
				return this.GetTable<PollAnswer>();
			}
		}
		
		public System.Data.Linq.Table<CompetitionAnswer> CompetitionAnswers
		{
			get
			{
				return this.GetTable<CompetitionAnswer>();
			}
		}
		
		public System.Data.Linq.Table<SuggestionRouting> SuggestionRoutings
		{
			get
			{
				return this.GetTable<SuggestionRouting>();
			}
		}
		
		public System.Data.Linq.Table<Suggestion> Suggestions
		{
			get
			{
				return this.GetTable<Suggestion>();
			}
		}
		
		public System.Data.Linq.Table<Pattern> Patterns
		{
			get
			{
				return this.GetTable<Pattern>();
			}
		}
		
		public System.Data.Linq.Table<SentMessageReciever> SentMessageRecievers
		{
			get
			{
				return this.GetTable<SentMessageReciever>();
			}
		}
		
		public System.Data.Linq.Table<SentMessage> SentMessages
		{
			get
			{
				return this.GetTable<SentMessage>();
			}
		}
		
		public System.Data.Linq.Table<InteractiveSentMessage> InteractiveSentMessages
		{
			get
			{
				return this.GetTable<InteractiveSentMessage>();
			}
		}
		
		public System.Data.Linq.Table<Citizen> Citizens
		{
			get
			{
				return this.GetTable<Citizen>();
			}
		}
		
		public System.Data.Linq.Table<Field> Fields
		{
			get
			{
				return this.GetTable<Field>();
			}
		}
		
		public System.Data.Linq.Table<ContactBook> ContactBooks
		{
			get
			{
				return this.GetTable<ContactBook>();
			}
		}
		
		public System.Data.Linq.Table<Contact> Contacts
		{
			get
			{
				return this.GetTable<Contact>();
			}
		}
		
		public System.Data.Linq.Table<FieldValue> FieldValues
		{
			get
			{
				return this.GetTable<FieldValue>();
			}
		}
		
		public System.Data.Linq.Table<Monagheseh> Monaghesehs
		{
			get
			{
				return this.GetTable<Monagheseh>();
			}
		}
		
		public System.Data.Linq.Table<Mozaiedeh> Mozaiedehs
		{
			get
			{
				return this.GetTable<Mozaiedeh>();
			}
		}
		
		public System.Data.Linq.Table<ResponseSetting> ResponseSettings
		{
			get
			{
				return this.GetTable<ResponseSetting>();
			}
		}
		
		public System.Data.Linq.Table<OperatorAccessRule> OperatorAccessRules
		{
			get
			{
				return this.GetTable<OperatorAccessRule>();
			}
		}
		
		public System.Data.Linq.Table<Organization> Organizations
		{
			get
			{
				return this.GetTable<Organization>();
			}
		}
		
		public System.Data.Linq.Table<InformSetting> InformSettings
		{
			get
			{
				return this.GetTable<InformSetting>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrganizationKeywords")]
	public partial class OrganizationKeyword : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _OrganizationID;
		
		private string _Text;
		
		private EntityRef<Organization> _Organization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOrganizationIDChanging(int value);
    partial void OnOrganizationIDChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public OrganizationKeyword()
		{
			this._Organization = default(EntityRef<Organization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationID", DbType="Int NOT NULL")]
		public int OrganizationID
		{
			get
			{
				return this._OrganizationID;
			}
			set
			{
				if ((this._OrganizationID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganizationIDChanging(value);
					this.SendPropertyChanging();
					this._OrganizationID = value;
					this.SendPropertyChanged("OrganizationID");
					this.OnOrganizationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_OrganizationKeyword", Storage="_Organization", ThisKey="OrganizationID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.OrganizationKeywords.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.OrganizationKeywords.Add(this);
						this._OrganizationID = value.ID;
					}
					else
					{
						this._OrganizationID = default(int);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Operators")]
	public partial class Operator : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _UserName;
		
		private System.DateTime _DateOfCreate;
		
		private string _CreatedBy;
		
		private EntityRef<OperatorAccessRule> _OperatorAccessRule;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnDateOfCreateChanging(System.DateTime value);
    partial void OnDateOfCreateChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    #endregion
		
		public Operator()
		{
			this._OperatorAccessRule = default(EntityRef<OperatorAccessRule>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfCreate", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfCreate
		{
			get
			{
				return this._DateOfCreate;
			}
			set
			{
				if ((this._DateOfCreate != value))
				{
					this.OnDateOfCreateChanging(value);
					this.SendPropertyChanging();
					this._DateOfCreate = value;
					this.SendPropertyChanged("DateOfCreate");
					this.OnDateOfCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Operator_OperatorAccessRule", Storage="_OperatorAccessRule", ThisKey="ID", OtherKey="OperatorID", IsUnique=true, IsForeignKey=false)]
		public OperatorAccessRule OperatorAccessRule
		{
			get
			{
				return this._OperatorAccessRule.Entity;
			}
			set
			{
				OperatorAccessRule previousValue = this._OperatorAccessRule.Entity;
				if (((previousValue != value) 
							|| (this._OperatorAccessRule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OperatorAccessRule.Entity = null;
						previousValue.Operator = null;
					}
					this._OperatorAccessRule.Entity = value;
					if ((value != null))
					{
						value.Operator = this;
					}
					this.SendPropertyChanged("OperatorAccessRule");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Supervisors")]
	public partial class Supervisor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Position;
		
		private string _UserName;
		
		private System.DateTime _DateOfCreate;
		
		private string _CreatedBy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnDateOfCreateChanging(System.DateTime value);
    partial void OnDateOfCreateChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    #endregion
		
		public Supervisor()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfCreate", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfCreate
		{
			get
			{
				return this._DateOfCreate;
			}
			set
			{
				if ((this._DateOfCreate != value))
				{
					this.OnDateOfCreateChanging(value);
					this.SendPropertyChanging();
					this._DateOfCreate = value;
					this.SendPropertyChanged("DateOfCreate");
					this.OnDateOfCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PollOptions")]
	public partial class PollOption : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PollID;
		
		private int _Identifier;
		
		private string _Text;
		
		private EntityRef<Poll> _Poll;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPollIDChanging(int value);
    partial void OnPollIDChanged();
    partial void OnIdentifierChanging(int value);
    partial void OnIdentifierChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public PollOption()
		{
			this._Poll = default(EntityRef<Poll>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PollID", DbType="Int NOT NULL")]
		public int PollID
		{
			get
			{
				return this._PollID;
			}
			set
			{
				if ((this._PollID != value))
				{
					if (this._Poll.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPollIDChanging(value);
					this.SendPropertyChanging();
					this._PollID = value;
					this.SendPropertyChanged("PollID");
					this.OnPollIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Identifier", DbType="Int NOT NULL")]
		public int Identifier
		{
			get
			{
				return this._Identifier;
			}
			set
			{
				if ((this._Identifier != value))
				{
					this.OnIdentifierChanging(value);
					this.SendPropertyChanging();
					this._Identifier = value;
					this.SendPropertyChanged("Identifier");
					this.OnIdentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Poll_PollOption", Storage="_Poll", ThisKey="PollID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Poll Poll
		{
			get
			{
				return this._Poll.Entity;
			}
			set
			{
				Poll previousValue = this._Poll.Entity;
				if (((previousValue != value) 
							|| (this._Poll.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Poll.Entity = null;
						previousValue.PollOptions.Remove(this);
					}
					this._Poll.Entity = value;
					if ((value != null))
					{
						value.PollOptions.Add(this);
						this._PollID = value.ID;
					}
					else
					{
						this._PollID = default(int);
					}
					this.SendPropertyChanged("Poll");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Polls")]
	public partial class Poll : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Subject;
		
		private string _Text;
		
		private System.DateTime _DateOfCreate;
		
		private int _DaysOfActivity;
		
		private string _CreatedBy;
		
		private EntitySet<PollOption> _PollOptions;
		
		private EntitySet<PollAnswer> _PollAnswers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnDateOfCreateChanging(System.DateTime value);
    partial void OnDateOfCreateChanged();
    partial void OnDaysOfActivityChanging(int value);
    partial void OnDaysOfActivityChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    #endregion
		
		public Poll()
		{
			this._PollOptions = new EntitySet<PollOption>(new Action<PollOption>(this.attach_PollOptions), new Action<PollOption>(this.detach_PollOptions));
			this._PollAnswers = new EntitySet<PollAnswer>(new Action<PollAnswer>(this.attach_PollAnswers), new Action<PollAnswer>(this.detach_PollAnswers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfCreate", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfCreate
		{
			get
			{
				return this._DateOfCreate;
			}
			set
			{
				if ((this._DateOfCreate != value))
				{
					this.OnDateOfCreateChanging(value);
					this.SendPropertyChanging();
					this._DateOfCreate = value;
					this.SendPropertyChanged("DateOfCreate");
					this.OnDateOfCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DaysOfActivity", DbType="Int NOT NULL")]
		public int DaysOfActivity
		{
			get
			{
				return this._DaysOfActivity;
			}
			set
			{
				if ((this._DaysOfActivity != value))
				{
					this.OnDaysOfActivityChanging(value);
					this.SendPropertyChanging();
					this._DaysOfActivity = value;
					this.SendPropertyChanged("DaysOfActivity");
					this.OnDaysOfActivityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Poll_PollOption", Storage="_PollOptions", ThisKey="ID", OtherKey="PollID")]
		public EntitySet<PollOption> PollOptions
		{
			get
			{
				return this._PollOptions;
			}
			set
			{
				this._PollOptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Poll_PollAnswer", Storage="_PollAnswers", ThisKey="ID", OtherKey="PollID")]
		public EntitySet<PollAnswer> PollAnswers
		{
			get
			{
				return this._PollAnswers;
			}
			set
			{
				this._PollAnswers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PollOptions(PollOption entity)
		{
			this.SendPropertyChanging();
			entity.Poll = this;
		}
		
		private void detach_PollOptions(PollOption entity)
		{
			this.SendPropertyChanging();
			entity.Poll = null;
		}
		
		private void attach_PollAnswers(PollAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Poll = this;
		}
		
		private void detach_PollAnswers(PollAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Poll = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompetitionOptions")]
	public partial class CompetitionOption : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CompetitionID;
		
		private int _Identifier;
		
		private string _Text;
		
		private EntityRef<Competition> _Competition;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCompetitionIDChanging(int value);
    partial void OnCompetitionIDChanged();
    partial void OnIdentifierChanging(int value);
    partial void OnIdentifierChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public CompetitionOption()
		{
			this._Competition = default(EntityRef<Competition>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompetitionID", DbType="Int NOT NULL")]
		public int CompetitionID
		{
			get
			{
				return this._CompetitionID;
			}
			set
			{
				if ((this._CompetitionID != value))
				{
					if (this._Competition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompetitionIDChanging(value);
					this.SendPropertyChanging();
					this._CompetitionID = value;
					this.SendPropertyChanged("CompetitionID");
					this.OnCompetitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Identifier", DbType="Int NOT NULL")]
		public int Identifier
		{
			get
			{
				return this._Identifier;
			}
			set
			{
				if ((this._Identifier != value))
				{
					this.OnIdentifierChanging(value);
					this.SendPropertyChanging();
					this._Identifier = value;
					this.SendPropertyChanged("Identifier");
					this.OnIdentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Competition_CompetitionOption", Storage="_Competition", ThisKey="CompetitionID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Competition Competition
		{
			get
			{
				return this._Competition.Entity;
			}
			set
			{
				Competition previousValue = this._Competition.Entity;
				if (((previousValue != value) 
							|| (this._Competition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Competition.Entity = null;
						previousValue.CompetitionOptions.Remove(this);
					}
					this._Competition.Entity = value;
					if ((value != null))
					{
						value.CompetitionOptions.Add(this);
						this._CompetitionID = value.ID;
					}
					else
					{
						this._CompetitionID = default(int);
					}
					this.SendPropertyChanged("Competition");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Competitions")]
	public partial class Competition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Subject;
		
		private string _SmsText;
		
		private int _Type;
		
		private System.DateTime _DateOfCreate;
		
		private int _DaysOfActivity;
		
		private string _CreatedBy;
		
		private EntitySet<CompetitionOption> _CompetitionOptions;
		
		private EntitySet<CompetitionAnswer> _CompetitionAnswers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnSmsTextChanging(string value);
    partial void OnSmsTextChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnDateOfCreateChanging(System.DateTime value);
    partial void OnDateOfCreateChanged();
    partial void OnDaysOfActivityChanging(int value);
    partial void OnDaysOfActivityChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    #endregion
		
		public Competition()
		{
			this._CompetitionOptions = new EntitySet<CompetitionOption>(new Action<CompetitionOption>(this.attach_CompetitionOptions), new Action<CompetitionOption>(this.detach_CompetitionOptions));
			this._CompetitionAnswers = new EntitySet<CompetitionAnswer>(new Action<CompetitionAnswer>(this.attach_CompetitionAnswers), new Action<CompetitionAnswer>(this.detach_CompetitionAnswers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SmsText", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string SmsText
		{
			get
			{
				return this._SmsText;
			}
			set
			{
				if ((this._SmsText != value))
				{
					this.OnSmsTextChanging(value);
					this.SendPropertyChanging();
					this._SmsText = value;
					this.SendPropertyChanged("SmsText");
					this.OnSmsTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfCreate", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfCreate
		{
			get
			{
				return this._DateOfCreate;
			}
			set
			{
				if ((this._DateOfCreate != value))
				{
					this.OnDateOfCreateChanging(value);
					this.SendPropertyChanging();
					this._DateOfCreate = value;
					this.SendPropertyChanged("DateOfCreate");
					this.OnDateOfCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DaysOfActivity", DbType="Int NOT NULL")]
		public int DaysOfActivity
		{
			get
			{
				return this._DaysOfActivity;
			}
			set
			{
				if ((this._DaysOfActivity != value))
				{
					this.OnDaysOfActivityChanging(value);
					this.SendPropertyChanging();
					this._DaysOfActivity = value;
					this.SendPropertyChanged("DaysOfActivity");
					this.OnDaysOfActivityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Competition_CompetitionOption", Storage="_CompetitionOptions", ThisKey="ID", OtherKey="CompetitionID")]
		public EntitySet<CompetitionOption> CompetitionOptions
		{
			get
			{
				return this._CompetitionOptions;
			}
			set
			{
				this._CompetitionOptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Competition_CompetitionAnswer", Storage="_CompetitionAnswers", ThisKey="ID", OtherKey="CompetitionID")]
		public EntitySet<CompetitionAnswer> CompetitionAnswers
		{
			get
			{
				return this._CompetitionAnswers;
			}
			set
			{
				this._CompetitionAnswers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompetitionOptions(CompetitionOption entity)
		{
			this.SendPropertyChanging();
			entity.Competition = this;
		}
		
		private void detach_CompetitionOptions(CompetitionOption entity)
		{
			this.SendPropertyChanging();
			entity.Competition = null;
		}
		
		private void attach_CompetitionAnswers(CompetitionAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Competition = this;
		}
		
		private void detach_CompetitionAnswers(CompetitionAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Competition = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RecievingErrors")]
	public partial class RecievingError : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _DateOf;
		
		private string _Text;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDateOfChanging(System.DateTime value);
    partial void OnDateOfChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public RecievingError()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOf", DbType="DateTime NOT NULL")]
		public System.DateTime DateOf
		{
			get
			{
				return this._DateOf;
			}
			set
			{
				if ((this._DateOf != value))
				{
					this.OnDateOfChanging(value);
					this.SendPropertyChanging();
					this._DateOf = value;
					this.SendPropertyChanged("DateOf");
					this.OnDateOfChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RecievedMessages")]
	public partial class RecievedMessage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CitizenID;
		
		private string _Text;
		
		private System.DateTime _DateOfRecieve;
		
		private int _Status;
		
		private int _ProcessResult;
		
		private EntitySet<PollAnswer> _PollAnswers;
		
		private EntitySet<CompetitionAnswer> _CompetitionAnswers;
		
		private EntitySet<Suggestion> _Suggestions;
		
		private EntityRef<Citizen> _Citizen;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCitizenIDChanging(int value);
    partial void OnCitizenIDChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnDateOfRecieveChanging(System.DateTime value);
    partial void OnDateOfRecieveChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnProcessResultChanging(int value);
    partial void OnProcessResultChanged();
    #endregion
		
		public RecievedMessage()
		{
			this._PollAnswers = new EntitySet<PollAnswer>(new Action<PollAnswer>(this.attach_PollAnswers), new Action<PollAnswer>(this.detach_PollAnswers));
			this._CompetitionAnswers = new EntitySet<CompetitionAnswer>(new Action<CompetitionAnswer>(this.attach_CompetitionAnswers), new Action<CompetitionAnswer>(this.detach_CompetitionAnswers));
			this._Suggestions = new EntitySet<Suggestion>(new Action<Suggestion>(this.attach_Suggestions), new Action<Suggestion>(this.detach_Suggestions));
			this._Citizen = default(EntityRef<Citizen>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CitizenID", DbType="Int NOT NULL")]
		public int CitizenID
		{
			get
			{
				return this._CitizenID;
			}
			set
			{
				if ((this._CitizenID != value))
				{
					if (this._Citizen.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCitizenIDChanging(value);
					this.SendPropertyChanging();
					this._CitizenID = value;
					this.SendPropertyChanged("CitizenID");
					this.OnCitizenIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfRecieve", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfRecieve
		{
			get
			{
				return this._DateOfRecieve;
			}
			set
			{
				if ((this._DateOfRecieve != value))
				{
					this.OnDateOfRecieveChanging(value);
					this.SendPropertyChanging();
					this._DateOfRecieve = value;
					this.SendPropertyChanged("DateOfRecieve");
					this.OnDateOfRecieveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessResult", DbType="Int NOT NULL")]
		public int ProcessResult
		{
			get
			{
				return this._ProcessResult;
			}
			set
			{
				if ((this._ProcessResult != value))
				{
					this.OnProcessResultChanging(value);
					this.SendPropertyChanging();
					this._ProcessResult = value;
					this.SendPropertyChanged("ProcessResult");
					this.OnProcessResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecievedMessage_PollAnswer", Storage="_PollAnswers", ThisKey="ID", OtherKey="RecievedMessageID")]
		public EntitySet<PollAnswer> PollAnswers
		{
			get
			{
				return this._PollAnswers;
			}
			set
			{
				this._PollAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecievedMessage_CompetitionAnswer", Storage="_CompetitionAnswers", ThisKey="ID", OtherKey="RecievedMessageID")]
		public EntitySet<CompetitionAnswer> CompetitionAnswers
		{
			get
			{
				return this._CompetitionAnswers;
			}
			set
			{
				this._CompetitionAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecievedMessage_Suggestion", Storage="_Suggestions", ThisKey="ID", OtherKey="RecievedMessageID")]
		public EntitySet<Suggestion> Suggestions
		{
			get
			{
				return this._Suggestions;
			}
			set
			{
				this._Suggestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Citizen_RecievedMessage", Storage="_Citizen", ThisKey="CitizenID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Citizen Citizen
		{
			get
			{
				return this._Citizen.Entity;
			}
			set
			{
				Citizen previousValue = this._Citizen.Entity;
				if (((previousValue != value) 
							|| (this._Citizen.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Citizen.Entity = null;
						previousValue.RecievedMessages.Remove(this);
					}
					this._Citizen.Entity = value;
					if ((value != null))
					{
						value.RecievedMessages.Add(this);
						this._CitizenID = value.ID;
					}
					else
					{
						this._CitizenID = default(int);
					}
					this.SendPropertyChanged("Citizen");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PollAnswers(PollAnswer entity)
		{
			this.SendPropertyChanging();
			entity.RecievedMessage = this;
		}
		
		private void detach_PollAnswers(PollAnswer entity)
		{
			this.SendPropertyChanging();
			entity.RecievedMessage = null;
		}
		
		private void attach_CompetitionAnswers(CompetitionAnswer entity)
		{
			this.SendPropertyChanging();
			entity.RecievedMessage = this;
		}
		
		private void detach_CompetitionAnswers(CompetitionAnswer entity)
		{
			this.SendPropertyChanging();
			entity.RecievedMessage = null;
		}
		
		private void attach_Suggestions(Suggestion entity)
		{
			this.SendPropertyChanging();
			entity.RecievedMessage = this;
		}
		
		private void detach_Suggestions(Suggestion entity)
		{
			this.SendPropertyChanging();
			entity.RecievedMessage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PollAnswers")]
	public partial class PollAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PollID;
		
		private int _RecievedMessageID;
		
		private int _SelectedOption;
		
		private EntityRef<Poll> _Poll;
		
		private EntityRef<RecievedMessage> _RecievedMessage;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPollIDChanging(int value);
    partial void OnPollIDChanged();
    partial void OnRecievedMessageIDChanging(int value);
    partial void OnRecievedMessageIDChanged();
    partial void OnSelectedOptionChanging(int value);
    partial void OnSelectedOptionChanged();
    #endregion
		
		public PollAnswer()
		{
			this._Poll = default(EntityRef<Poll>);
			this._RecievedMessage = default(EntityRef<RecievedMessage>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PollID", DbType="Int NOT NULL")]
		public int PollID
		{
			get
			{
				return this._PollID;
			}
			set
			{
				if ((this._PollID != value))
				{
					if (this._Poll.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPollIDChanging(value);
					this.SendPropertyChanging();
					this._PollID = value;
					this.SendPropertyChanged("PollID");
					this.OnPollIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecievedMessageID", DbType="Int NOT NULL")]
		public int RecievedMessageID
		{
			get
			{
				return this._RecievedMessageID;
			}
			set
			{
				if ((this._RecievedMessageID != value))
				{
					if (this._RecievedMessage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecievedMessageIDChanging(value);
					this.SendPropertyChanging();
					this._RecievedMessageID = value;
					this.SendPropertyChanged("RecievedMessageID");
					this.OnRecievedMessageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SelectedOption", DbType="Int NOT NULL")]
		public int SelectedOption
		{
			get
			{
				return this._SelectedOption;
			}
			set
			{
				if ((this._SelectedOption != value))
				{
					this.OnSelectedOptionChanging(value);
					this.SendPropertyChanging();
					this._SelectedOption = value;
					this.SendPropertyChanged("SelectedOption");
					this.OnSelectedOptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Poll_PollAnswer", Storage="_Poll", ThisKey="PollID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Poll Poll
		{
			get
			{
				return this._Poll.Entity;
			}
			set
			{
				Poll previousValue = this._Poll.Entity;
				if (((previousValue != value) 
							|| (this._Poll.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Poll.Entity = null;
						previousValue.PollAnswers.Remove(this);
					}
					this._Poll.Entity = value;
					if ((value != null))
					{
						value.PollAnswers.Add(this);
						this._PollID = value.ID;
					}
					else
					{
						this._PollID = default(int);
					}
					this.SendPropertyChanged("Poll");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecievedMessage_PollAnswer", Storage="_RecievedMessage", ThisKey="RecievedMessageID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RecievedMessage RecievedMessage
		{
			get
			{
				return this._RecievedMessage.Entity;
			}
			set
			{
				RecievedMessage previousValue = this._RecievedMessage.Entity;
				if (((previousValue != value) 
							|| (this._RecievedMessage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RecievedMessage.Entity = null;
						previousValue.PollAnswers.Remove(this);
					}
					this._RecievedMessage.Entity = value;
					if ((value != null))
					{
						value.PollAnswers.Add(this);
						this._RecievedMessageID = value.ID;
					}
					else
					{
						this._RecievedMessageID = default(int);
					}
					this.SendPropertyChanged("RecievedMessage");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompetitionAnswer")]
	public partial class CompetitionAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CompetitionID;
		
		private int _RecievedMessageID;
		
		private string _Answer;
		
		private EntityRef<Competition> _Competition;
		
		private EntityRef<RecievedMessage> _RecievedMessage;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCompetitionIDChanging(int value);
    partial void OnCompetitionIDChanged();
    partial void OnRecievedMessageIDChanging(int value);
    partial void OnRecievedMessageIDChanged();
    partial void OnAnswerChanging(string value);
    partial void OnAnswerChanged();
    #endregion
		
		public CompetitionAnswer()
		{
			this._Competition = default(EntityRef<Competition>);
			this._RecievedMessage = default(EntityRef<RecievedMessage>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompetitionID", DbType="Int NOT NULL")]
		public int CompetitionID
		{
			get
			{
				return this._CompetitionID;
			}
			set
			{
				if ((this._CompetitionID != value))
				{
					if (this._Competition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompetitionIDChanging(value);
					this.SendPropertyChanging();
					this._CompetitionID = value;
					this.SendPropertyChanged("CompetitionID");
					this.OnCompetitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecievedMessageID", DbType="Int NOT NULL")]
		public int RecievedMessageID
		{
			get
			{
				return this._RecievedMessageID;
			}
			set
			{
				if ((this._RecievedMessageID != value))
				{
					if (this._RecievedMessage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecievedMessageIDChanging(value);
					this.SendPropertyChanging();
					this._RecievedMessageID = value;
					this.SendPropertyChanged("RecievedMessageID");
					this.OnRecievedMessageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answer", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				if ((this._Answer != value))
				{
					this.OnAnswerChanging(value);
					this.SendPropertyChanging();
					this._Answer = value;
					this.SendPropertyChanged("Answer");
					this.OnAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Competition_CompetitionAnswer", Storage="_Competition", ThisKey="CompetitionID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Competition Competition
		{
			get
			{
				return this._Competition.Entity;
			}
			set
			{
				Competition previousValue = this._Competition.Entity;
				if (((previousValue != value) 
							|| (this._Competition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Competition.Entity = null;
						previousValue.CompetitionAnswers.Remove(this);
					}
					this._Competition.Entity = value;
					if ((value != null))
					{
						value.CompetitionAnswers.Add(this);
						this._CompetitionID = value.ID;
					}
					else
					{
						this._CompetitionID = default(int);
					}
					this.SendPropertyChanged("Competition");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecievedMessage_CompetitionAnswer", Storage="_RecievedMessage", ThisKey="RecievedMessageID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RecievedMessage RecievedMessage
		{
			get
			{
				return this._RecievedMessage.Entity;
			}
			set
			{
				RecievedMessage previousValue = this._RecievedMessage.Entity;
				if (((previousValue != value) 
							|| (this._RecievedMessage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RecievedMessage.Entity = null;
						previousValue.CompetitionAnswers.Remove(this);
					}
					this._RecievedMessage.Entity = value;
					if ((value != null))
					{
						value.CompetitionAnswers.Add(this);
						this._RecievedMessageID = value.ID;
					}
					else
					{
						this._RecievedMessageID = default(int);
					}
					this.SendPropertyChanged("RecievedMessage");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SuggestionRoutings")]
	public partial class SuggestionRouting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _SuggestionID;
		
		private int _OrganizationID;
		
		private System.DateTime _DateOfRoute;
		
		private int _Status;
		
		private System.Nullable<System.DateTime> _DateOfAction;
		
		private string _Explanation;
		
		private bool _Visible;
		
		private EntityRef<Suggestion> _Suggestion;
		
		private EntityRef<Organization> _Organization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSuggestionIDChanging(int value);
    partial void OnSuggestionIDChanged();
    partial void OnOrganizationIDChanging(int value);
    partial void OnOrganizationIDChanged();
    partial void OnDateOfRouteChanging(System.DateTime value);
    partial void OnDateOfRouteChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnDateOfActionChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfActionChanged();
    partial void OnExplanationChanging(string value);
    partial void OnExplanationChanged();
    partial void OnVisibleChanging(bool value);
    partial void OnVisibleChanged();
    #endregion
		
		public SuggestionRouting()
		{
			this._Suggestion = default(EntityRef<Suggestion>);
			this._Organization = default(EntityRef<Organization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SuggestionID", DbType="Int NOT NULL")]
		public int SuggestionID
		{
			get
			{
				return this._SuggestionID;
			}
			set
			{
				if ((this._SuggestionID != value))
				{
					if (this._Suggestion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSuggestionIDChanging(value);
					this.SendPropertyChanging();
					this._SuggestionID = value;
					this.SendPropertyChanged("SuggestionID");
					this.OnSuggestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationID", DbType="Int NOT NULL")]
		public int OrganizationID
		{
			get
			{
				return this._OrganizationID;
			}
			set
			{
				if ((this._OrganizationID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganizationIDChanging(value);
					this.SendPropertyChanging();
					this._OrganizationID = value;
					this.SendPropertyChanged("OrganizationID");
					this.OnOrganizationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfRoute", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfRoute
		{
			get
			{
				return this._DateOfRoute;
			}
			set
			{
				if ((this._DateOfRoute != value))
				{
					this.OnDateOfRouteChanging(value);
					this.SendPropertyChanging();
					this._DateOfRoute = value;
					this.SendPropertyChanged("DateOfRoute");
					this.OnDateOfRouteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfAction", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfAction
		{
			get
			{
				return this._DateOfAction;
			}
			set
			{
				if ((this._DateOfAction != value))
				{
					this.OnDateOfActionChanging(value);
					this.SendPropertyChanging();
					this._DateOfAction = value;
					this.SendPropertyChanged("DateOfAction");
					this.OnDateOfActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Explanation", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Explanation
		{
			get
			{
				return this._Explanation;
			}
			set
			{
				if ((this._Explanation != value))
				{
					this.OnExplanationChanging(value);
					this.SendPropertyChanging();
					this._Explanation = value;
					this.SendPropertyChanged("Explanation");
					this.OnExplanationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Visible", DbType="Bit NOT NULL")]
		public bool Visible
		{
			get
			{
				return this._Visible;
			}
			set
			{
				if ((this._Visible != value))
				{
					this.OnVisibleChanging(value);
					this.SendPropertyChanging();
					this._Visible = value;
					this.SendPropertyChanged("Visible");
					this.OnVisibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Suggestion_SuggestionRouting", Storage="_Suggestion", ThisKey="SuggestionID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Suggestion Suggestion
		{
			get
			{
				return this._Suggestion.Entity;
			}
			set
			{
				Suggestion previousValue = this._Suggestion.Entity;
				if (((previousValue != value) 
							|| (this._Suggestion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Suggestion.Entity = null;
						previousValue.SuggestionRoutings.Remove(this);
					}
					this._Suggestion.Entity = value;
					if ((value != null))
					{
						value.SuggestionRoutings.Add(this);
						this._SuggestionID = value.ID;
					}
					else
					{
						this._SuggestionID = default(int);
					}
					this.SendPropertyChanged("Suggestion");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_SuggestionRouting", Storage="_Organization", ThisKey="OrganizationID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.SuggestionRoutings.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.SuggestionRoutings.Add(this);
						this._OrganizationID = value.ID;
					}
					else
					{
						this._OrganizationID = default(int);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Suggestions")]
	public partial class Suggestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _RecievedMessageID;
		
		private int _Status;
		
		private string _PersuitCode;
		
		private bool _Visible;
		
		private EntitySet<SuggestionRouting> _SuggestionRoutings;
		
		private EntityRef<RecievedMessage> _RecievedMessage;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRecievedMessageIDChanging(int value);
    partial void OnRecievedMessageIDChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnPersuitCodeChanging(string value);
    partial void OnPersuitCodeChanged();
    partial void OnVisibleChanging(bool value);
    partial void OnVisibleChanged();
    #endregion
		
		public Suggestion()
		{
			this._SuggestionRoutings = new EntitySet<SuggestionRouting>(new Action<SuggestionRouting>(this.attach_SuggestionRoutings), new Action<SuggestionRouting>(this.detach_SuggestionRoutings));
			this._RecievedMessage = default(EntityRef<RecievedMessage>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecievedMessageID", DbType="Int NOT NULL")]
		public int RecievedMessageID
		{
			get
			{
				return this._RecievedMessageID;
			}
			set
			{
				if ((this._RecievedMessageID != value))
				{
					if (this._RecievedMessage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecievedMessageIDChanging(value);
					this.SendPropertyChanging();
					this._RecievedMessageID = value;
					this.SendPropertyChanged("RecievedMessageID");
					this.OnRecievedMessageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersuitCode", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string PersuitCode
		{
			get
			{
				return this._PersuitCode;
			}
			set
			{
				if ((this._PersuitCode != value))
				{
					this.OnPersuitCodeChanging(value);
					this.SendPropertyChanging();
					this._PersuitCode = value;
					this.SendPropertyChanged("PersuitCode");
					this.OnPersuitCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Visible", DbType="Bit NOT NULL")]
		public bool Visible
		{
			get
			{
				return this._Visible;
			}
			set
			{
				if ((this._Visible != value))
				{
					this.OnVisibleChanging(value);
					this.SendPropertyChanging();
					this._Visible = value;
					this.SendPropertyChanged("Visible");
					this.OnVisibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Suggestion_SuggestionRouting", Storage="_SuggestionRoutings", ThisKey="ID", OtherKey="SuggestionID")]
		public EntitySet<SuggestionRouting> SuggestionRoutings
		{
			get
			{
				return this._SuggestionRoutings;
			}
			set
			{
				this._SuggestionRoutings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecievedMessage_Suggestion", Storage="_RecievedMessage", ThisKey="RecievedMessageID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RecievedMessage RecievedMessage
		{
			get
			{
				return this._RecievedMessage.Entity;
			}
			set
			{
				RecievedMessage previousValue = this._RecievedMessage.Entity;
				if (((previousValue != value) 
							|| (this._RecievedMessage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RecievedMessage.Entity = null;
						previousValue.Suggestions.Remove(this);
					}
					this._RecievedMessage.Entity = value;
					if ((value != null))
					{
						value.Suggestions.Add(this);
						this._RecievedMessageID = value.ID;
					}
					else
					{
						this._RecievedMessageID = default(int);
					}
					this.SendPropertyChanged("RecievedMessage");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SuggestionRoutings(SuggestionRouting entity)
		{
			this.SendPropertyChanging();
			entity.Suggestion = this;
		}
		
		private void detach_SuggestionRoutings(SuggestionRouting entity)
		{
			this.SendPropertyChanging();
			entity.Suggestion = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patterns")]
	public partial class Pattern : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Text;
		
		private System.DateTime _DateOfCreate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnDateOfCreateChanging(System.DateTime value);
    partial void OnDateOfCreateChanged();
    #endregion
		
		public Pattern()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfCreate", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfCreate
		{
			get
			{
				return this._DateOfCreate;
			}
			set
			{
				if ((this._DateOfCreate != value))
				{
					this.OnDateOfCreateChanging(value);
					this.SendPropertyChanging();
					this._DateOfCreate = value;
					this.SendPropertyChanged("DateOfCreate");
					this.OnDateOfCreateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SentMessageRecievers")]
	public partial class SentMessageReciever : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _SentMessageID;
		
		private string _MobNumber;
		
		private int _Status;
		
		private EntityRef<SentMessage> _SentMessage;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSentMessageIDChanging(int value);
    partial void OnSentMessageIDChanged();
    partial void OnMobNumberChanging(string value);
    partial void OnMobNumberChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    #endregion
		
		public SentMessageReciever()
		{
			this._SentMessage = default(EntityRef<SentMessage>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SentMessageID", DbType="Int NOT NULL")]
		public int SentMessageID
		{
			get
			{
				return this._SentMessageID;
			}
			set
			{
				if ((this._SentMessageID != value))
				{
					if (this._SentMessage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSentMessageIDChanging(value);
					this.SendPropertyChanging();
					this._SentMessageID = value;
					this.SendPropertyChanged("SentMessageID");
					this.OnSentMessageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobNumber", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string MobNumber
		{
			get
			{
				return this._MobNumber;
			}
			set
			{
				if ((this._MobNumber != value))
				{
					this.OnMobNumberChanging(value);
					this.SendPropertyChanging();
					this._MobNumber = value;
					this.SendPropertyChanged("MobNumber");
					this.OnMobNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SentMessage_SentMessageReciever", Storage="_SentMessage", ThisKey="SentMessageID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public SentMessage SentMessage
		{
			get
			{
				return this._SentMessage.Entity;
			}
			set
			{
				SentMessage previousValue = this._SentMessage.Entity;
				if (((previousValue != value) 
							|| (this._SentMessage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SentMessage.Entity = null;
						previousValue.SentMessageRecievers.Remove(this);
					}
					this._SentMessage.Entity = value;
					if ((value != null))
					{
						value.SentMessageRecievers.Add(this);
						this._SentMessageID = value.ID;
					}
					else
					{
						this._SentMessageID = default(int);
					}
					this.SendPropertyChanged("SentMessage");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SentMessages")]
	public partial class SentMessage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Text;
		
		private System.DateTime _DateOfSend;
		
		private EntitySet<SentMessageReciever> _SentMessageRecievers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnDateOfSendChanging(System.DateTime value);
    partial void OnDateOfSendChanged();
    #endregion
		
		public SentMessage()
		{
			this._SentMessageRecievers = new EntitySet<SentMessageReciever>(new Action<SentMessageReciever>(this.attach_SentMessageRecievers), new Action<SentMessageReciever>(this.detach_SentMessageRecievers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfSend", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfSend
		{
			get
			{
				return this._DateOfSend;
			}
			set
			{
				if ((this._DateOfSend != value))
				{
					this.OnDateOfSendChanging(value);
					this.SendPropertyChanging();
					this._DateOfSend = value;
					this.SendPropertyChanged("DateOfSend");
					this.OnDateOfSendChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SentMessage_SentMessageReciever", Storage="_SentMessageRecievers", ThisKey="ID", OtherKey="SentMessageID")]
		public EntitySet<SentMessageReciever> SentMessageRecievers
		{
			get
			{
				return this._SentMessageRecievers;
			}
			set
			{
				this._SentMessageRecievers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SentMessageRecievers(SentMessageReciever entity)
		{
			this.SendPropertyChanging();
			entity.SentMessage = this;
		}
		
		private void detach_SentMessageRecievers(SentMessageReciever entity)
		{
			this.SendPropertyChanging();
			entity.SentMessage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InteractiveSentMessages")]
	public partial class InteractiveSentMessage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Text;
		
		private System.DateTime _DateOfSend;
		
		private string _MobNumber;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnDateOfSendChanging(System.DateTime value);
    partial void OnDateOfSendChanged();
    partial void OnMobNumberChanging(string value);
    partial void OnMobNumberChanged();
    #endregion
		
		public InteractiveSentMessage()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfSend", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfSend
		{
			get
			{
				return this._DateOfSend;
			}
			set
			{
				if ((this._DateOfSend != value))
				{
					this.OnDateOfSendChanging(value);
					this.SendPropertyChanging();
					this._DateOfSend = value;
					this.SendPropertyChanged("DateOfSend");
					this.OnDateOfSendChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobNumber", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string MobNumber
		{
			get
			{
				return this._MobNumber;
			}
			set
			{
				if ((this._MobNumber != value))
				{
					this.OnMobNumberChanging(value);
					this.SendPropertyChanging();
					this._MobNumber = value;
					this.SendPropertyChanged("MobNumber");
					this.OnMobNumberChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Citizens")]
	public partial class Citizen : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _MobNumber;
		
		private string _Name;
		
		private System.Nullable<int> _Gender;
		
		private System.Nullable<int> _BornYear;
		
		private string _Job;
		
		private string _Zone;
		
		private string _Address;
		
		private System.DateTime _DateOfAdd;
		
		private EntitySet<RecievedMessage> _RecievedMessages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMobNumberChanging(string value);
    partial void OnMobNumberChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnGenderChanging(System.Nullable<int> value);
    partial void OnGenderChanged();
    partial void OnBornYearChanging(System.Nullable<int> value);
    partial void OnBornYearChanged();
    partial void OnJobChanging(string value);
    partial void OnJobChanged();
    partial void OnZoneChanging(string value);
    partial void OnZoneChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnDateOfAddChanging(System.DateTime value);
    partial void OnDateOfAddChanged();
    #endregion
		
		public Citizen()
		{
			this._RecievedMessages = new EntitySet<RecievedMessage>(new Action<RecievedMessage>(this.attach_RecievedMessages), new Action<RecievedMessage>(this.detach_RecievedMessages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobNumber", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string MobNumber
		{
			get
			{
				return this._MobNumber;
			}
			set
			{
				if ((this._MobNumber != value))
				{
					this.OnMobNumberChanging(value);
					this.SendPropertyChanging();
					this._MobNumber = value;
					this.SendPropertyChanged("MobNumber");
					this.OnMobNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Int")]
		public System.Nullable<int> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BornYear", DbType="Int")]
		public System.Nullable<int> BornYear
		{
			get
			{
				return this._BornYear;
			}
			set
			{
				if ((this._BornYear != value))
				{
					this.OnBornYearChanging(value);
					this.SendPropertyChanging();
					this._BornYear = value;
					this.SendPropertyChanged("BornYear");
					this.OnBornYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Job", DbType="NVarChar(50)")]
		public string Job
		{
			get
			{
				return this._Job;
			}
			set
			{
				if ((this._Job != value))
				{
					this.OnJobChanging(value);
					this.SendPropertyChanging();
					this._Job = value;
					this.SendPropertyChanged("Job");
					this.OnJobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zone", DbType="NVarChar(50)")]
		public string Zone
		{
			get
			{
				return this._Zone;
			}
			set
			{
				if ((this._Zone != value))
				{
					this.OnZoneChanging(value);
					this.SendPropertyChanging();
					this._Zone = value;
					this.SendPropertyChanged("Zone");
					this.OnZoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(500)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfAdd", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfAdd
		{
			get
			{
				return this._DateOfAdd;
			}
			set
			{
				if ((this._DateOfAdd != value))
				{
					this.OnDateOfAddChanging(value);
					this.SendPropertyChanging();
					this._DateOfAdd = value;
					this.SendPropertyChanged("DateOfAdd");
					this.OnDateOfAddChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Citizen_RecievedMessage", Storage="_RecievedMessages", ThisKey="ID", OtherKey="CitizenID")]
		public EntitySet<RecievedMessage> RecievedMessages
		{
			get
			{
				return this._RecievedMessages;
			}
			set
			{
				this._RecievedMessages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RecievedMessages(RecievedMessage entity)
		{
			this.SendPropertyChanging();
			entity.Citizen = this;
		}
		
		private void detach_RecievedMessages(RecievedMessage entity)
		{
			this.SendPropertyChanging();
			entity.Citizen = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Fields")]
	public partial class Field : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ContactBookID;
		
		private string _Name;
		
		private string _Identifier;
		
		private EntitySet<FieldValue> _FieldValues;
		
		private EntityRef<ContactBook> _ContactBook;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnContactBookIDChanging(int value);
    partial void OnContactBookIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIdentifierChanging(string value);
    partial void OnIdentifierChanged();
    #endregion
		
		public Field()
		{
			this._FieldValues = new EntitySet<FieldValue>(new Action<FieldValue>(this.attach_FieldValues), new Action<FieldValue>(this.detach_FieldValues));
			this._ContactBook = default(EntityRef<ContactBook>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactBookID", DbType="Int NOT NULL")]
		public int ContactBookID
		{
			get
			{
				return this._ContactBookID;
			}
			set
			{
				if ((this._ContactBookID != value))
				{
					if (this._ContactBook.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactBookIDChanging(value);
					this.SendPropertyChanging();
					this._ContactBookID = value;
					this.SendPropertyChanged("ContactBookID");
					this.OnContactBookIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Identifier", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Identifier
		{
			get
			{
				return this._Identifier;
			}
			set
			{
				if ((this._Identifier != value))
				{
					this.OnIdentifierChanging(value);
					this.SendPropertyChanging();
					this._Identifier = value;
					this.SendPropertyChanged("Identifier");
					this.OnIdentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Field_FieldValue", Storage="_FieldValues", ThisKey="ID", OtherKey="FieldID")]
		public EntitySet<FieldValue> FieldValues
		{
			get
			{
				return this._FieldValues;
			}
			set
			{
				this._FieldValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContactBook_Field", Storage="_ContactBook", ThisKey="ContactBookID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ContactBook ContactBook
		{
			get
			{
				return this._ContactBook.Entity;
			}
			set
			{
				ContactBook previousValue = this._ContactBook.Entity;
				if (((previousValue != value) 
							|| (this._ContactBook.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContactBook.Entity = null;
						previousValue.Fields.Remove(this);
					}
					this._ContactBook.Entity = value;
					if ((value != null))
					{
						value.Fields.Add(this);
						this._ContactBookID = value.ID;
					}
					else
					{
						this._ContactBookID = default(int);
					}
					this.SendPropertyChanged("ContactBook");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FieldValues(FieldValue entity)
		{
			this.SendPropertyChanging();
			entity.Field = this;
		}
		
		private void detach_FieldValues(FieldValue entity)
		{
			this.SendPropertyChanging();
			entity.Field = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContactBooks")]
	public partial class ContactBook : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.DateTime _DateOfCreate;
		
		private EntitySet<Field> _Fields;
		
		private EntitySet<Contact> _Contacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateOfCreateChanging(System.DateTime value);
    partial void OnDateOfCreateChanged();
    #endregion
		
		public ContactBook()
		{
			this._Fields = new EntitySet<Field>(new Action<Field>(this.attach_Fields), new Action<Field>(this.detach_Fields));
			this._Contacts = new EntitySet<Contact>(new Action<Contact>(this.attach_Contacts), new Action<Contact>(this.detach_Contacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfCreate", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfCreate
		{
			get
			{
				return this._DateOfCreate;
			}
			set
			{
				if ((this._DateOfCreate != value))
				{
					this.OnDateOfCreateChanging(value);
					this.SendPropertyChanging();
					this._DateOfCreate = value;
					this.SendPropertyChanged("DateOfCreate");
					this.OnDateOfCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContactBook_Field", Storage="_Fields", ThisKey="ID", OtherKey="ContactBookID")]
		public EntitySet<Field> Fields
		{
			get
			{
				return this._Fields;
			}
			set
			{
				this._Fields.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContactBook_Contact", Storage="_Contacts", ThisKey="ID", OtherKey="BookID")]
		public EntitySet<Contact> Contacts
		{
			get
			{
				return this._Contacts;
			}
			set
			{
				this._Contacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Fields(Field entity)
		{
			this.SendPropertyChanging();
			entity.ContactBook = this;
		}
		
		private void detach_Fields(Field entity)
		{
			this.SendPropertyChanging();
			entity.ContactBook = null;
		}
		
		private void attach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.ContactBook = this;
		}
		
		private void detach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.ContactBook = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contacts")]
	public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _BookID;
		
		private string _MobNumber;
		
		private System.DateTime _DateOfAdd;
		
		private EntitySet<FieldValue> _FieldValues;
		
		private EntityRef<ContactBook> _ContactBook;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBookIDChanging(int value);
    partial void OnBookIDChanged();
    partial void OnMobNumberChanging(string value);
    partial void OnMobNumberChanged();
    partial void OnDateOfAddChanging(System.DateTime value);
    partial void OnDateOfAddChanged();
    #endregion
		
		public Contact()
		{
			this._FieldValues = new EntitySet<FieldValue>(new Action<FieldValue>(this.attach_FieldValues), new Action<FieldValue>(this.detach_FieldValues));
			this._ContactBook = default(EntityRef<ContactBook>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookID", DbType="Int NOT NULL")]
		public int BookID
		{
			get
			{
				return this._BookID;
			}
			set
			{
				if ((this._BookID != value))
				{
					if (this._ContactBook.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBookIDChanging(value);
					this.SendPropertyChanging();
					this._BookID = value;
					this.SendPropertyChanged("BookID");
					this.OnBookIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobNumber", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string MobNumber
		{
			get
			{
				return this._MobNumber;
			}
			set
			{
				if ((this._MobNumber != value))
				{
					this.OnMobNumberChanging(value);
					this.SendPropertyChanging();
					this._MobNumber = value;
					this.SendPropertyChanged("MobNumber");
					this.OnMobNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfAdd", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfAdd
		{
			get
			{
				return this._DateOfAdd;
			}
			set
			{
				if ((this._DateOfAdd != value))
				{
					this.OnDateOfAddChanging(value);
					this.SendPropertyChanging();
					this._DateOfAdd = value;
					this.SendPropertyChanged("DateOfAdd");
					this.OnDateOfAddChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_FieldValue", Storage="_FieldValues", ThisKey="ID", OtherKey="ContactID")]
		public EntitySet<FieldValue> FieldValues
		{
			get
			{
				return this._FieldValues;
			}
			set
			{
				this._FieldValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContactBook_Contact", Storage="_ContactBook", ThisKey="BookID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ContactBook ContactBook
		{
			get
			{
				return this._ContactBook.Entity;
			}
			set
			{
				ContactBook previousValue = this._ContactBook.Entity;
				if (((previousValue != value) 
							|| (this._ContactBook.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContactBook.Entity = null;
						previousValue.Contacts.Remove(this);
					}
					this._ContactBook.Entity = value;
					if ((value != null))
					{
						value.Contacts.Add(this);
						this._BookID = value.ID;
					}
					else
					{
						this._BookID = default(int);
					}
					this.SendPropertyChanged("ContactBook");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FieldValues(FieldValue entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_FieldValues(FieldValue entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FieldValues")]
	public partial class FieldValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContactID;
		
		private int _FieldID;
		
		private string _Value;
		
		private EntityRef<Contact> _Contact;
		
		private EntityRef<Field> _Field;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContactIDChanging(int value);
    partial void OnContactIDChanged();
    partial void OnFieldIDChanging(int value);
    partial void OnFieldIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public FieldValue()
		{
			this._Contact = default(EntityRef<Contact>);
			this._Field = default(EntityRef<Field>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ContactID
		{
			get
			{
				return this._ContactID;
			}
			set
			{
				if ((this._ContactID != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIDChanging(value);
					this.SendPropertyChanging();
					this._ContactID = value;
					this.SendPropertyChanged("ContactID");
					this.OnContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FieldID
		{
			get
			{
				return this._FieldID;
			}
			set
			{
				if ((this._FieldID != value))
				{
					if (this._Field.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFieldIDChanging(value);
					this.SendPropertyChanging();
					this._FieldID = value;
					this.SendPropertyChanged("FieldID");
					this.OnFieldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(100)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_FieldValue", Storage="_Contact", ThisKey="ContactID", OtherKey="ID", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.FieldValues.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.FieldValues.Add(this);
						this._ContactID = value.ID;
					}
					else
					{
						this._ContactID = default(int);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Field_FieldValue", Storage="_Field", ThisKey="FieldID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Field Field
		{
			get
			{
				return this._Field.Entity;
			}
			set
			{
				Field previousValue = this._Field.Entity;
				if (((previousValue != value) 
							|| (this._Field.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Field.Entity = null;
						previousValue.FieldValues.Remove(this);
					}
					this._Field.Entity = value;
					if ((value != null))
					{
						value.FieldValues.Add(this);
						this._FieldID = value.ID;
					}
					else
					{
						this._FieldID = default(int);
					}
					this.SendPropertyChanged("Field");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Monaghesehs")]
	public partial class Monagheseh : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Shomare;
		
		private string _Name;
		
		private System.DateTime _DateOfStart;
		
		private System.DateTime _DateOfEnd;
		
		private string _CreatedBy;
		
		private System.DateTime _DateOfCreate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnShomareChanging(string value);
    partial void OnShomareChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateOfStartChanging(System.DateTime value);
    partial void OnDateOfStartChanged();
    partial void OnDateOfEndChanging(System.DateTime value);
    partial void OnDateOfEndChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnDateOfCreateChanging(System.DateTime value);
    partial void OnDateOfCreateChanged();
    #endregion
		
		public Monagheseh()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Shomare", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Shomare
		{
			get
			{
				return this._Shomare;
			}
			set
			{
				if ((this._Shomare != value))
				{
					this.OnShomareChanging(value);
					this.SendPropertyChanging();
					this._Shomare = value;
					this.SendPropertyChanged("Shomare");
					this.OnShomareChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfStart", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfStart
		{
			get
			{
				return this._DateOfStart;
			}
			set
			{
				if ((this._DateOfStart != value))
				{
					this.OnDateOfStartChanging(value);
					this.SendPropertyChanging();
					this._DateOfStart = value;
					this.SendPropertyChanged("DateOfStart");
					this.OnDateOfStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfEnd", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfEnd
		{
			get
			{
				return this._DateOfEnd;
			}
			set
			{
				if ((this._DateOfEnd != value))
				{
					this.OnDateOfEndChanging(value);
					this.SendPropertyChanging();
					this._DateOfEnd = value;
					this.SendPropertyChanged("DateOfEnd");
					this.OnDateOfEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfCreate", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfCreate
		{
			get
			{
				return this._DateOfCreate;
			}
			set
			{
				if ((this._DateOfCreate != value))
				{
					this.OnDateOfCreateChanging(value);
					this.SendPropertyChanging();
					this._DateOfCreate = value;
					this.SendPropertyChanged("DateOfCreate");
					this.OnDateOfCreateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Mozaiedehs")]
	public partial class Mozaiedeh : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Shomare;
		
		private string _Name;
		
		private System.DateTime _DateOfStart;
		
		private System.DateTime _DateOfEnd;
		
		private string _CreatedBy;
		
		private System.DateTime _DateOfCreate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnShomareChanging(string value);
    partial void OnShomareChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateOfStartChanging(System.DateTime value);
    partial void OnDateOfStartChanged();
    partial void OnDateOfEndChanging(System.DateTime value);
    partial void OnDateOfEndChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnDateOfCreateChanging(System.DateTime value);
    partial void OnDateOfCreateChanged();
    #endregion
		
		public Mozaiedeh()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Shomare", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Shomare
		{
			get
			{
				return this._Shomare;
			}
			set
			{
				if ((this._Shomare != value))
				{
					this.OnShomareChanging(value);
					this.SendPropertyChanging();
					this._Shomare = value;
					this.SendPropertyChanged("Shomare");
					this.OnShomareChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfStart", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfStart
		{
			get
			{
				return this._DateOfStart;
			}
			set
			{
				if ((this._DateOfStart != value))
				{
					this.OnDateOfStartChanging(value);
					this.SendPropertyChanging();
					this._DateOfStart = value;
					this.SendPropertyChanged("DateOfStart");
					this.OnDateOfStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfEnd", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfEnd
		{
			get
			{
				return this._DateOfEnd;
			}
			set
			{
				if ((this._DateOfEnd != value))
				{
					this.OnDateOfEndChanging(value);
					this.SendPropertyChanging();
					this._DateOfEnd = value;
					this.SendPropertyChanged("DateOfEnd");
					this.OnDateOfEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfCreate", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfCreate
		{
			get
			{
				return this._DateOfCreate;
			}
			set
			{
				if ((this._DateOfCreate != value))
				{
					this.OnDateOfCreateChanging(value);
					this.SendPropertyChanging();
					this._DateOfCreate = value;
					this.SendPropertyChanged("DateOfCreate");
					this.OnDateOfCreateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ResponseSettings")]
	public partial class ResponseSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private bool _PersuitCodeResponse;
		
		private string _PersuitCodeText;
		
		private bool _CorrectPollAnswerResponse;
		
		private string _CorrectPollAnswerText;
		
		private bool _IncorrectPollOptionSelectedResponse;
		
		private string _IncorrectPollOptionSelectedText;
		
		private bool _NoActivePollExistResponse;
		
		private string _NoActivePollExistText;
		
		private bool _CorrectCompetitionAnswerResponse;
		
		private string _CorrectCompetitionAnswerText;
		
		private bool _IncorrectCompetitionOptionSelectedResponse;
		
		private string _IncorrectCompetitionOptionSelectedText;
		
		private bool _IncorrectFormatResponse;
		
		private string _IncorrectFormatText;
		
		private bool _NoActiveCompetitionExistResponse;
		
		private string _NoActiveCompetitionExistText;
		
		private bool _IncorrectPersuitCodeResponse;
		
		private string _IncorrectPersuitCodeText;
		
		private bool _MonaghesatResponse;
		
		private string _MonaghesatPattern;
		
		private bool _MozaiedatResponse;
		
		private string _MozaiedatPattern;
		
		private bool _IncorrectServiceCodeResponse;
		
		private string _IncorrectServiceCodeText;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPersuitCodeResponseChanging(bool value);
    partial void OnPersuitCodeResponseChanged();
    partial void OnPersuitCodeTextChanging(string value);
    partial void OnPersuitCodeTextChanged();
    partial void OnCorrectPollAnswerResponseChanging(bool value);
    partial void OnCorrectPollAnswerResponseChanged();
    partial void OnCorrectPollAnswerTextChanging(string value);
    partial void OnCorrectPollAnswerTextChanged();
    partial void OnIncorrectPollOptionSelectedResponseChanging(bool value);
    partial void OnIncorrectPollOptionSelectedResponseChanged();
    partial void OnIncorrectPollOptionSelectedTextChanging(string value);
    partial void OnIncorrectPollOptionSelectedTextChanged();
    partial void OnNoActivePollExistResponseChanging(bool value);
    partial void OnNoActivePollExistResponseChanged();
    partial void OnNoActivePollExistTextChanging(string value);
    partial void OnNoActivePollExistTextChanged();
    partial void OnCorrectCompetitionAnswerResponseChanging(bool value);
    partial void OnCorrectCompetitionAnswerResponseChanged();
    partial void OnCorrectCompetitionAnswerTextChanging(string value);
    partial void OnCorrectCompetitionAnswerTextChanged();
    partial void OnIncorrectCompetitionOptionSelectedResponseChanging(bool value);
    partial void OnIncorrectCompetitionOptionSelectedResponseChanged();
    partial void OnIncorrectCompetitionOptionSelectedTextChanging(string value);
    partial void OnIncorrectCompetitionOptionSelectedTextChanged();
    partial void OnIncorrectFormatResponseChanging(bool value);
    partial void OnIncorrectFormatResponseChanged();
    partial void OnIncorrectFormatTextChanging(string value);
    partial void OnIncorrectFormatTextChanged();
    partial void OnNoActiveCompetitionExistResponseChanging(bool value);
    partial void OnNoActiveCompetitionExistResponseChanged();
    partial void OnNoActiveCompetitionExistTextChanging(string value);
    partial void OnNoActiveCompetitionExistTextChanged();
    partial void OnIncorrectPersuitCodeResponseChanging(bool value);
    partial void OnIncorrectPersuitCodeResponseChanged();
    partial void OnIncorrectPersuitCodeTextChanging(string value);
    partial void OnIncorrectPersuitCodeTextChanged();
    partial void OnMonaghesatResponseChanging(bool value);
    partial void OnMonaghesatResponseChanged();
    partial void OnMonaghesatPatternChanging(string value);
    partial void OnMonaghesatPatternChanged();
    partial void OnMozaiedatResponseChanging(bool value);
    partial void OnMozaiedatResponseChanged();
    partial void OnMozaiedatPatternChanging(string value);
    partial void OnMozaiedatPatternChanged();
    partial void OnIncorrectServiceCodeResponseChanging(bool value);
    partial void OnIncorrectServiceCodeResponseChanged();
    partial void OnIncorrectServiceCodeTextChanging(string value);
    partial void OnIncorrectServiceCodeTextChanged();
    #endregion
		
		public ResponseSetting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersuitCodeResponse", DbType="Bit NOT NULL")]
		public bool PersuitCodeResponse
		{
			get
			{
				return this._PersuitCodeResponse;
			}
			set
			{
				if ((this._PersuitCodeResponse != value))
				{
					this.OnPersuitCodeResponseChanging(value);
					this.SendPropertyChanging();
					this._PersuitCodeResponse = value;
					this.SendPropertyChanged("PersuitCodeResponse");
					this.OnPersuitCodeResponseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersuitCodeText", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string PersuitCodeText
		{
			get
			{
				return this._PersuitCodeText;
			}
			set
			{
				if ((this._PersuitCodeText != value))
				{
					this.OnPersuitCodeTextChanging(value);
					this.SendPropertyChanging();
					this._PersuitCodeText = value;
					this.SendPropertyChanged("PersuitCodeText");
					this.OnPersuitCodeTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CorrectPollAnswerResponse", DbType="Bit NOT NULL")]
		public bool CorrectPollAnswerResponse
		{
			get
			{
				return this._CorrectPollAnswerResponse;
			}
			set
			{
				if ((this._CorrectPollAnswerResponse != value))
				{
					this.OnCorrectPollAnswerResponseChanging(value);
					this.SendPropertyChanging();
					this._CorrectPollAnswerResponse = value;
					this.SendPropertyChanged("CorrectPollAnswerResponse");
					this.OnCorrectPollAnswerResponseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CorrectPollAnswerText", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string CorrectPollAnswerText
		{
			get
			{
				return this._CorrectPollAnswerText;
			}
			set
			{
				if ((this._CorrectPollAnswerText != value))
				{
					this.OnCorrectPollAnswerTextChanging(value);
					this.SendPropertyChanging();
					this._CorrectPollAnswerText = value;
					this.SendPropertyChanged("CorrectPollAnswerText");
					this.OnCorrectPollAnswerTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncorrectPollOptionSelectedResponse", DbType="Bit NOT NULL")]
		public bool IncorrectPollOptionSelectedResponse
		{
			get
			{
				return this._IncorrectPollOptionSelectedResponse;
			}
			set
			{
				if ((this._IncorrectPollOptionSelectedResponse != value))
				{
					this.OnIncorrectPollOptionSelectedResponseChanging(value);
					this.SendPropertyChanging();
					this._IncorrectPollOptionSelectedResponse = value;
					this.SendPropertyChanged("IncorrectPollOptionSelectedResponse");
					this.OnIncorrectPollOptionSelectedResponseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncorrectPollOptionSelectedText", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string IncorrectPollOptionSelectedText
		{
			get
			{
				return this._IncorrectPollOptionSelectedText;
			}
			set
			{
				if ((this._IncorrectPollOptionSelectedText != value))
				{
					this.OnIncorrectPollOptionSelectedTextChanging(value);
					this.SendPropertyChanging();
					this._IncorrectPollOptionSelectedText = value;
					this.SendPropertyChanged("IncorrectPollOptionSelectedText");
					this.OnIncorrectPollOptionSelectedTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoActivePollExistResponse", DbType="Bit NOT NULL")]
		public bool NoActivePollExistResponse
		{
			get
			{
				return this._NoActivePollExistResponse;
			}
			set
			{
				if ((this._NoActivePollExistResponse != value))
				{
					this.OnNoActivePollExistResponseChanging(value);
					this.SendPropertyChanging();
					this._NoActivePollExistResponse = value;
					this.SendPropertyChanged("NoActivePollExistResponse");
					this.OnNoActivePollExistResponseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoActivePollExistText", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string NoActivePollExistText
		{
			get
			{
				return this._NoActivePollExistText;
			}
			set
			{
				if ((this._NoActivePollExistText != value))
				{
					this.OnNoActivePollExistTextChanging(value);
					this.SendPropertyChanging();
					this._NoActivePollExistText = value;
					this.SendPropertyChanged("NoActivePollExistText");
					this.OnNoActivePollExistTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CorrectCompetitionAnswerResponse", DbType="Bit NOT NULL")]
		public bool CorrectCompetitionAnswerResponse
		{
			get
			{
				return this._CorrectCompetitionAnswerResponse;
			}
			set
			{
				if ((this._CorrectCompetitionAnswerResponse != value))
				{
					this.OnCorrectCompetitionAnswerResponseChanging(value);
					this.SendPropertyChanging();
					this._CorrectCompetitionAnswerResponse = value;
					this.SendPropertyChanged("CorrectCompetitionAnswerResponse");
					this.OnCorrectCompetitionAnswerResponseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CorrectCompetitionAnswerText", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string CorrectCompetitionAnswerText
		{
			get
			{
				return this._CorrectCompetitionAnswerText;
			}
			set
			{
				if ((this._CorrectCompetitionAnswerText != value))
				{
					this.OnCorrectCompetitionAnswerTextChanging(value);
					this.SendPropertyChanging();
					this._CorrectCompetitionAnswerText = value;
					this.SendPropertyChanged("CorrectCompetitionAnswerText");
					this.OnCorrectCompetitionAnswerTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncorrectCompetitionOptionSelectedResponse", DbType="Bit NOT NULL")]
		public bool IncorrectCompetitionOptionSelectedResponse
		{
			get
			{
				return this._IncorrectCompetitionOptionSelectedResponse;
			}
			set
			{
				if ((this._IncorrectCompetitionOptionSelectedResponse != value))
				{
					this.OnIncorrectCompetitionOptionSelectedResponseChanging(value);
					this.SendPropertyChanging();
					this._IncorrectCompetitionOptionSelectedResponse = value;
					this.SendPropertyChanged("IncorrectCompetitionOptionSelectedResponse");
					this.OnIncorrectCompetitionOptionSelectedResponseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncorrectCompetitionOptionSelectedText", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string IncorrectCompetitionOptionSelectedText
		{
			get
			{
				return this._IncorrectCompetitionOptionSelectedText;
			}
			set
			{
				if ((this._IncorrectCompetitionOptionSelectedText != value))
				{
					this.OnIncorrectCompetitionOptionSelectedTextChanging(value);
					this.SendPropertyChanging();
					this._IncorrectCompetitionOptionSelectedText = value;
					this.SendPropertyChanged("IncorrectCompetitionOptionSelectedText");
					this.OnIncorrectCompetitionOptionSelectedTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncorrectFormatResponse", DbType="Bit NOT NULL")]
		public bool IncorrectFormatResponse
		{
			get
			{
				return this._IncorrectFormatResponse;
			}
			set
			{
				if ((this._IncorrectFormatResponse != value))
				{
					this.OnIncorrectFormatResponseChanging(value);
					this.SendPropertyChanging();
					this._IncorrectFormatResponse = value;
					this.SendPropertyChanged("IncorrectFormatResponse");
					this.OnIncorrectFormatResponseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncorrectFormatText", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string IncorrectFormatText
		{
			get
			{
				return this._IncorrectFormatText;
			}
			set
			{
				if ((this._IncorrectFormatText != value))
				{
					this.OnIncorrectFormatTextChanging(value);
					this.SendPropertyChanging();
					this._IncorrectFormatText = value;
					this.SendPropertyChanged("IncorrectFormatText");
					this.OnIncorrectFormatTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoActiveCompetitionExistResponse", DbType="Bit NOT NULL")]
		public bool NoActiveCompetitionExistResponse
		{
			get
			{
				return this._NoActiveCompetitionExistResponse;
			}
			set
			{
				if ((this._NoActiveCompetitionExistResponse != value))
				{
					this.OnNoActiveCompetitionExistResponseChanging(value);
					this.SendPropertyChanging();
					this._NoActiveCompetitionExistResponse = value;
					this.SendPropertyChanged("NoActiveCompetitionExistResponse");
					this.OnNoActiveCompetitionExistResponseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoActiveCompetitionExistText", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string NoActiveCompetitionExistText
		{
			get
			{
				return this._NoActiveCompetitionExistText;
			}
			set
			{
				if ((this._NoActiveCompetitionExistText != value))
				{
					this.OnNoActiveCompetitionExistTextChanging(value);
					this.SendPropertyChanging();
					this._NoActiveCompetitionExistText = value;
					this.SendPropertyChanged("NoActiveCompetitionExistText");
					this.OnNoActiveCompetitionExistTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncorrectPersuitCodeResponse", DbType="Bit NOT NULL")]
		public bool IncorrectPersuitCodeResponse
		{
			get
			{
				return this._IncorrectPersuitCodeResponse;
			}
			set
			{
				if ((this._IncorrectPersuitCodeResponse != value))
				{
					this.OnIncorrectPersuitCodeResponseChanging(value);
					this.SendPropertyChanging();
					this._IncorrectPersuitCodeResponse = value;
					this.SendPropertyChanged("IncorrectPersuitCodeResponse");
					this.OnIncorrectPersuitCodeResponseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncorrectPersuitCodeText", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string IncorrectPersuitCodeText
		{
			get
			{
				return this._IncorrectPersuitCodeText;
			}
			set
			{
				if ((this._IncorrectPersuitCodeText != value))
				{
					this.OnIncorrectPersuitCodeTextChanging(value);
					this.SendPropertyChanging();
					this._IncorrectPersuitCodeText = value;
					this.SendPropertyChanged("IncorrectPersuitCodeText");
					this.OnIncorrectPersuitCodeTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MonaghesatResponse", DbType="Bit NOT NULL")]
		public bool MonaghesatResponse
		{
			get
			{
				return this._MonaghesatResponse;
			}
			set
			{
				if ((this._MonaghesatResponse != value))
				{
					this.OnMonaghesatResponseChanging(value);
					this.SendPropertyChanging();
					this._MonaghesatResponse = value;
					this.SendPropertyChanged("MonaghesatResponse");
					this.OnMonaghesatResponseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MonaghesatPattern", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string MonaghesatPattern
		{
			get
			{
				return this._MonaghesatPattern;
			}
			set
			{
				if ((this._MonaghesatPattern != value))
				{
					this.OnMonaghesatPatternChanging(value);
					this.SendPropertyChanging();
					this._MonaghesatPattern = value;
					this.SendPropertyChanged("MonaghesatPattern");
					this.OnMonaghesatPatternChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MozaiedatResponse", DbType="Bit NOT NULL")]
		public bool MozaiedatResponse
		{
			get
			{
				return this._MozaiedatResponse;
			}
			set
			{
				if ((this._MozaiedatResponse != value))
				{
					this.OnMozaiedatResponseChanging(value);
					this.SendPropertyChanging();
					this._MozaiedatResponse = value;
					this.SendPropertyChanged("MozaiedatResponse");
					this.OnMozaiedatResponseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MozaiedatPattern", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string MozaiedatPattern
		{
			get
			{
				return this._MozaiedatPattern;
			}
			set
			{
				if ((this._MozaiedatPattern != value))
				{
					this.OnMozaiedatPatternChanging(value);
					this.SendPropertyChanging();
					this._MozaiedatPattern = value;
					this.SendPropertyChanged("MozaiedatPattern");
					this.OnMozaiedatPatternChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncorrectServiceCodeResponse", DbType="Bit NOT NULL")]
		public bool IncorrectServiceCodeResponse
		{
			get
			{
				return this._IncorrectServiceCodeResponse;
			}
			set
			{
				if ((this._IncorrectServiceCodeResponse != value))
				{
					this.OnIncorrectServiceCodeResponseChanging(value);
					this.SendPropertyChanging();
					this._IncorrectServiceCodeResponse = value;
					this.SendPropertyChanged("IncorrectServiceCodeResponse");
					this.OnIncorrectServiceCodeResponseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncorrectServiceCodeText", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string IncorrectServiceCodeText
		{
			get
			{
				return this._IncorrectServiceCodeText;
			}
			set
			{
				if ((this._IncorrectServiceCodeText != value))
				{
					this.OnIncorrectServiceCodeTextChanging(value);
					this.SendPropertyChanging();
					this._IncorrectServiceCodeText = value;
					this.SendPropertyChanged("IncorrectServiceCodeText");
					this.OnIncorrectServiceCodeTextChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OperatorAccessRules")]
	public partial class OperatorAccessRule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OperatorID;
		
		private int _Users;
		
		private int _Suggestions;
		
		private int _Polls;
		
		private int _Competitions;
		
		private int _SendSms;
		
		private int _Reports;
		
		private int _Services;
		
		private int _Settings;
		
		private EntityRef<Operator> _Operator;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOperatorIDChanging(int value);
    partial void OnOperatorIDChanged();
    partial void OnUsersChanging(int value);
    partial void OnUsersChanged();
    partial void OnSuggestionsChanging(int value);
    partial void OnSuggestionsChanged();
    partial void OnPollsChanging(int value);
    partial void OnPollsChanged();
    partial void OnCompetitionsChanging(int value);
    partial void OnCompetitionsChanged();
    partial void OnSendSmsChanging(int value);
    partial void OnSendSmsChanged();
    partial void OnReportsChanging(int value);
    partial void OnReportsChanged();
    partial void OnServicesChanging(int value);
    partial void OnServicesChanged();
    partial void OnSettingsChanging(int value);
    partial void OnSettingsChanged();
    #endregion
		
		public OperatorAccessRule()
		{
			this._Operator = default(EntityRef<Operator>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperatorID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OperatorID
		{
			get
			{
				return this._OperatorID;
			}
			set
			{
				if ((this._OperatorID != value))
				{
					if (this._Operator.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOperatorIDChanging(value);
					this.SendPropertyChanging();
					this._OperatorID = value;
					this.SendPropertyChanged("OperatorID");
					this.OnOperatorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Users", DbType="Int NOT NULL")]
		public int Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				if ((this._Users != value))
				{
					this.OnUsersChanging(value);
					this.SendPropertyChanging();
					this._Users = value;
					this.SendPropertyChanged("Users");
					this.OnUsersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Suggestions", DbType="Int NOT NULL")]
		public int Suggestions
		{
			get
			{
				return this._Suggestions;
			}
			set
			{
				if ((this._Suggestions != value))
				{
					this.OnSuggestionsChanging(value);
					this.SendPropertyChanging();
					this._Suggestions = value;
					this.SendPropertyChanged("Suggestions");
					this.OnSuggestionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Polls", DbType="Int NOT NULL")]
		public int Polls
		{
			get
			{
				return this._Polls;
			}
			set
			{
				if ((this._Polls != value))
				{
					this.OnPollsChanging(value);
					this.SendPropertyChanging();
					this._Polls = value;
					this.SendPropertyChanged("Polls");
					this.OnPollsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Competitions", DbType="Int NOT NULL")]
		public int Competitions
		{
			get
			{
				return this._Competitions;
			}
			set
			{
				if ((this._Competitions != value))
				{
					this.OnCompetitionsChanging(value);
					this.SendPropertyChanging();
					this._Competitions = value;
					this.SendPropertyChanged("Competitions");
					this.OnCompetitionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SendSms", DbType="Int NOT NULL")]
		public int SendSms
		{
			get
			{
				return this._SendSms;
			}
			set
			{
				if ((this._SendSms != value))
				{
					this.OnSendSmsChanging(value);
					this.SendPropertyChanging();
					this._SendSms = value;
					this.SendPropertyChanged("SendSms");
					this.OnSendSmsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reports", DbType="Int NOT NULL")]
		public int Reports
		{
			get
			{
				return this._Reports;
			}
			set
			{
				if ((this._Reports != value))
				{
					this.OnReportsChanging(value);
					this.SendPropertyChanging();
					this._Reports = value;
					this.SendPropertyChanged("Reports");
					this.OnReportsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Services", DbType="Int NOT NULL")]
		public int Services
		{
			get
			{
				return this._Services;
			}
			set
			{
				if ((this._Services != value))
				{
					this.OnServicesChanging(value);
					this.SendPropertyChanging();
					this._Services = value;
					this.SendPropertyChanged("Services");
					this.OnServicesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Settings", DbType="Int NOT NULL")]
		public int Settings
		{
			get
			{
				return this._Settings;
			}
			set
			{
				if ((this._Settings != value))
				{
					this.OnSettingsChanging(value);
					this.SendPropertyChanging();
					this._Settings = value;
					this.SendPropertyChanged("Settings");
					this.OnSettingsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Operator_OperatorAccessRule", Storage="_Operator", ThisKey="OperatorID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Operator Operator
		{
			get
			{
				return this._Operator.Entity;
			}
			set
			{
				Operator previousValue = this._Operator.Entity;
				if (((previousValue != value) 
							|| (this._Operator.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Operator.Entity = null;
						previousValue.OperatorAccessRule = null;
					}
					this._Operator.Entity = value;
					if ((value != null))
					{
						value.OperatorAccessRule = this;
						this._OperatorID = value.ID;
					}
					else
					{
						this._OperatorID = default(int);
					}
					this.SendPropertyChanged("Operator");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Organizations")]
	public partial class Organization : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _UserName;
		
		private System.DateTime _DateOfCreate;
		
		private string _CreatedBy;
		
		private bool _ViewUnroutedSuggestions;
		
		private string _CellPhones;
		
		private EntitySet<OrganizationKeyword> _OrganizationKeywords;
		
		private EntitySet<SuggestionRouting> _SuggestionRoutings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnDateOfCreateChanging(System.DateTime value);
    partial void OnDateOfCreateChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnViewUnroutedSuggestionsChanging(bool value);
    partial void OnViewUnroutedSuggestionsChanged();
    partial void OnCellPhonesChanging(string value);
    partial void OnCellPhonesChanged();
    #endregion
		
		public Organization()
		{
			this._OrganizationKeywords = new EntitySet<OrganizationKeyword>(new Action<OrganizationKeyword>(this.attach_OrganizationKeywords), new Action<OrganizationKeyword>(this.detach_OrganizationKeywords));
			this._SuggestionRoutings = new EntitySet<SuggestionRouting>(new Action<SuggestionRouting>(this.attach_SuggestionRoutings), new Action<SuggestionRouting>(this.detach_SuggestionRoutings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfCreate", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfCreate
		{
			get
			{
				return this._DateOfCreate;
			}
			set
			{
				if ((this._DateOfCreate != value))
				{
					this.OnDateOfCreateChanging(value);
					this.SendPropertyChanging();
					this._DateOfCreate = value;
					this.SendPropertyChanged("DateOfCreate");
					this.OnDateOfCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ViewUnroutedSuggestions", DbType="Bit NOT NULL")]
		public bool ViewUnroutedSuggestions
		{
			get
			{
				return this._ViewUnroutedSuggestions;
			}
			set
			{
				if ((this._ViewUnroutedSuggestions != value))
				{
					this.OnViewUnroutedSuggestionsChanging(value);
					this.SendPropertyChanging();
					this._ViewUnroutedSuggestions = value;
					this.SendPropertyChanged("ViewUnroutedSuggestions");
					this.OnViewUnroutedSuggestionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CellPhones", DbType="NVarChar(100)")]
		public string CellPhones
		{
			get
			{
				return this._CellPhones;
			}
			set
			{
				if ((this._CellPhones != value))
				{
					this.OnCellPhonesChanging(value);
					this.SendPropertyChanging();
					this._CellPhones = value;
					this.SendPropertyChanged("CellPhones");
					this.OnCellPhonesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_OrganizationKeyword", Storage="_OrganizationKeywords", ThisKey="ID", OtherKey="OrganizationID")]
		public EntitySet<OrganizationKeyword> OrganizationKeywords
		{
			get
			{
				return this._OrganizationKeywords;
			}
			set
			{
				this._OrganizationKeywords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_SuggestionRouting", Storage="_SuggestionRoutings", ThisKey="ID", OtherKey="OrganizationID")]
		public EntitySet<SuggestionRouting> SuggestionRoutings
		{
			get
			{
				return this._SuggestionRoutings;
			}
			set
			{
				this._SuggestionRoutings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrganizationKeywords(OrganizationKeyword entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_OrganizationKeywords(OrganizationKeyword entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_SuggestionRoutings(SuggestionRouting entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_SuggestionRoutings(SuggestionRouting entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InformSettings")]
	public partial class InformSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private bool _InformRouting;
		
		private bool _InformVerifying;
		
		private bool _InformRejection;
		
		private bool _InformOrganizationOperators;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnInformRoutingChanging(bool value);
    partial void OnInformRoutingChanged();
    partial void OnInformVerifyingChanging(bool value);
    partial void OnInformVerifyingChanged();
    partial void OnInformRejectionChanging(bool value);
    partial void OnInformRejectionChanged();
    partial void OnInformOrganizationOperatorsChanging(bool value);
    partial void OnInformOrganizationOperatorsChanged();
    #endregion
		
		public InformSetting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InformRouting", DbType="Bit NOT NULL")]
		public bool InformRouting
		{
			get
			{
				return this._InformRouting;
			}
			set
			{
				if ((this._InformRouting != value))
				{
					this.OnInformRoutingChanging(value);
					this.SendPropertyChanging();
					this._InformRouting = value;
					this.SendPropertyChanged("InformRouting");
					this.OnInformRoutingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InformVerifying", DbType="Bit NOT NULL")]
		public bool InformVerifying
		{
			get
			{
				return this._InformVerifying;
			}
			set
			{
				if ((this._InformVerifying != value))
				{
					this.OnInformVerifyingChanging(value);
					this.SendPropertyChanging();
					this._InformVerifying = value;
					this.SendPropertyChanged("InformVerifying");
					this.OnInformVerifyingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InformRejection", DbType="Bit NOT NULL")]
		public bool InformRejection
		{
			get
			{
				return this._InformRejection;
			}
			set
			{
				if ((this._InformRejection != value))
				{
					this.OnInformRejectionChanging(value);
					this.SendPropertyChanging();
					this._InformRejection = value;
					this.SendPropertyChanged("InformRejection");
					this.OnInformRejectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InformOrganizationOperators", DbType="Bit NOT NULL")]
		public bool InformOrganizationOperators
		{
			get
			{
				return this._InformOrganizationOperators;
			}
			set
			{
				if ((this._InformOrganizationOperators != value))
				{
					this.OnInformOrganizationOperatorsChanging(value);
					this.SendPropertyChanging();
					this._InformOrganizationOperators = value;
					this.SendPropertyChanged("InformOrganizationOperators");
					this.OnInformOrganizationOperatorsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
